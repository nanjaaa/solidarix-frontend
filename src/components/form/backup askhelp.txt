import { useState } from "react";
import { ChatBubbleForm } from "./ChatFormBubble";
import type { Address } from "../../hooks/UseAddressAutocomplete";

type HelpRequestData = {
    helpType?: string;
    description?: string;
    helpTime?: string;
    location?: Address
}

type StepKey = "helpType" | "description" | "location" | "helpTime";

const questions: { key: StepKey; label: string; placeholder?: string }[] = [
    { 
        key: "helpType", 
        label: "Quel type d‚Äôaide recherchez-vous ?", 
        placeholder: "Choisissez parmi les options ci-dessous..." 
    },
    { 
        key: "description", 
        label: "Pourriez-vous dire un peu plus sur votre besoin :) ?", 
        placeholder: "Pr√©sentez-vous et d√©crivez en d√©tail vote besoin...." 
    },
    { 
        key: "helpTime", 
        label : "Indiquez-nous le moment qui vous conviendrait le mieux pour recevoir de l‚Äôaide", 
        placeholder: "S√©lectionnez un cr√©nau..."},
    { 
        key: "location", 
        label: "Pouvez-vous indiquer l'adresse compl√®te o√π aura lieu l'entraide ?",
        placeholder: "Ex : 12 rue des Fleurs, 75000 Paris"
    },
];

export default function HelpRequestForm() {
    const [step, setStep] = useState<number>(0);
    const currentQuestion = questions[step-1];
    const [maxStepReached, setMaxStepReached] = useState<number>(0);
    const [formData, setFormData] = useState<HelpRequestData>({
        helpType: "",
        description: "",
        helpTime: "",
        location: {
            number: 0,
            streetName: "",
            street: "",
            postalCode: "",
            city: "",
            latitude: "",
            longitude: "",
            fullAddress: "",
        },
    });

    const [editingStep, setEditingStep] = useState<number | null>(null);

    const handleChange = (
        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => {
            const { name, value } = e.target;
            setFormData((prev) => ({
                ...prev,
                [name]: value,
        }));
    };

    const handleLocationChange = (location: Address) => {
        setFormData((prev) => ({
            ...prev,
            location,
        }));
    };

    const isStepValid = (currentStep: number): boolean => {
        switch (currentStep) {
            case 1:
            return !!formData.helpType?.trim();
            case 2:
            return !!formData.description?.trim();
            case 3:
            return !!formData.helpTime?.trim();
            case 4:
            return !!formData.location?.fullAddress?.trim();
            default:
            return true;
        }
    };

    const handleNext = () => {
        if (!isStepValid(step)) return;
        const nextStep = Math.max(maxStepReached,step + 1);
        setMaxStepReached(() => nextStep);
        setStep(nextStep);
        setEditingStep(null);
    };

    const handleEdit = (stepNumber: number) => {
        setEditingStep(stepNumber);
        setStep(stepNumber);
    };
    
    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        console.log("Formulaire soumis :", formData);
    };

  return (
    <div className="card w-[800px]">
        <form
            onSubmit={handleSubmit}
            className=""
        >
        <h2 className="text-xl font-semibold text-primary-darkblue">
            Demande d‚Äôaide
        </h2>

        {step === 0 && (
            <button
            type="button"
            onClick={handleNext}
            className="bg-primary-green text-white py-2 px-4 rounded hover:bg-green-700"
            >
            Commencer
            </button>
        )}

        {/* √âtape 1 - Type d‚Äôaide */}
        {maxStepReached >= 1 && (
            <div className="my-4">
            {/*<label className="block text-sm font-medium text-primary-darkblue">
                Quel type d‚Äôaide recherchez-vous ?
            </label>*/}
            {step === 1 || editingStep === 1 ? (
                
                <ChatBubbleForm
                    question={currentQuestion.label}
                    type="select"
                    value={formData.helpType ?? ""}
                    onChange={(val) => setFormData({ ...formData, helpType: val })}
                    onSend={handleNext}
                    placeholder={currentQuestion.placeholder || ""}
                    options={["Courses", "Bricolage", "Garde d‚Äôenfants"]}
                />
                       
            ) : (
                <div className="bg-gray-100 p-2 rounded flex justify-between items-center">
                    <span>üõ† Type d‚Äôaide : {formData.helpType || "‚Äî"}</span>
                    <button
                        type="button"
                        onClick={() => handleEdit(1)}
                        className="text-sm text-blue-600 hover:underline"
                    >
                        Modifier
                    </button>
                </div>
            )}
            </div>
        )}

        {/* √âtape 2 */}
        {maxStepReached >= 2 && (
            <div className="my-4">
            {step === 2 || editingStep === 2 ? (
                
                <ChatBubbleForm
                    question={currentQuestion.label}
                    type="text"
                    value={formData.description ?? ""}
                    onChange={(val) => setFormData({ ...formData, description: val })}
                    onSend={handleNext}
                    placeholder={currentQuestion.placeholder || ""}
                />

            ) : (
                <div className="bg-gray-100 p-2 rounded flex justify-between items-center">
                <span>üìù Description : {formData.description || "‚Äî"}</span>
                <button
                    type="button"
                    onClick={() => handleEdit(2)}
                    className="text-sm text-blue-600 hover:underline"
                >
                    Modifier
                </button>
                </div>
            )}
            </div>
        )}

        {/* √âtape 3 */}
        {maxStepReached >= 3 && (
            <div className="my-4">
            {step === 3 || editingStep === 3 ? (
                <>
                <ChatBubbleForm
                    question={currentQuestion.label}
                    type="datetime"
                    value={formData.helpTime ?? ""}
                    onChange={(val) => setFormData({ ...formData, helpTime: val })}
                    onSend={handleNext}
                    placeholder={currentQuestion.placeholder || ""}
                />
                </>
            ) : (
                <div className="bg-gray-100 p-2 rounded flex justify-between items-center">
                <span>
                    üïì Date et heure :{" "}
                    {formData.helpTime
                    ? new Date(formData.helpTime).toLocaleString("fr-FR", {
                        dateStyle: "full",
                        timeStyle: "short",
                        })
                    : "‚Äî"}
                </span>
                <button
                    type="button"
                    onClick={() => handleEdit(3)}
                    className="text-sm text-blue-600 hover:underline"
                >
                    Modifier
                </button>
                </div>
            )}
            </div>
        )}


        {/* √âtape 4 */}
        {maxStepReached >= 4 && (
            <div className="my-4">
                {step === 4 || editingStep === 4 ? (
                    <ChatBubbleForm
                        question={currentQuestion.label}
                        type="address"
                        value={formData.location?.fullAddress ?? ""}
                        onChange={(val) => {
                            try {
                                const parsed = JSON.parse(val);
                                handleLocationChange(parsed);
                            } catch {
                                // En cas d'erreur, on stocke une adresse avec uniquement fullAddress
                                handleLocationChange({
                                    number: 0,
                                    streetName: "",
                                    street: "",
                                    postalCode: "",
                                    city: "",
                                    latitude: "",
                                    longitude: "",
                                    fullAddress: val,
                                });
                            }
                        }}
                        onSend={handleNext}
                        placeholder={currentQuestion.placeholder || ""}
                    />
                ) : (
                    <div className="bg-gray-100 p-2 rounded flex justify-between items-center">
                        <span>üìç Adresse : {formData.location?.fullAddress || "‚Äî"}</span>
                        <button
                            type="button"
                            onClick={() => handleEdit(4)}
                            className="text-sm text-blue-600 hover:underline"
                        >
                            Modifier
                        </button>
                    </div>
                )}
            </div>
        )}


        {maxStepReached >= 4 && editingStep === null && (
            <button
                type="submit"
                className="bg-primary-green text-white py-2 px-4 rounded hover:bg-green-700"
            >
            Envoyer ma demande
            </button>
        )}

        <pre className="text-xs text-gray-500 bg-gray-50 p-2 rounded">
            Debug: {JSON.stringify(formData, null, 2)}
        </pre>
        </form>
    </div>
  );
}